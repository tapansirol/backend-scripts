{{- if .Capabilities.APIVersions.Has "apps/v1beta2" }}
apiVersion: apps/v1beta2
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "fullname" . }}-hl
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  {{- if and (.Capabilities.KubeVersion.Major | hasPrefix "1") (.Capabilities.KubeVersion.Minor | hasPrefix "7") }}
  # Set updateStrategy to "RollingUpdate", if we're on Kubernetes 1.7.
  # It's already the default for apps/v1beta2 (Kubernetes 1.8 onwards)
  updateStrategy:
    type: RollingUpdate
  {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      annotations:
        # seccomp.security.alpha.kubernetes.io/pod: docker/default
        # container.apparmor.security.beta.kubernetes.io/hcl-ucd-prod: runtime/default
        productName: "UrbanCode Deploy"
        productID: "CNZ80ML"
        productVersion: "@serverbuildversion@"
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      #https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types, 
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms, 
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- if .Values.arch }}
                - {{ .Values.arch }}
                {{- else }}
                - {{ template "arch" . }}
                {{- end }}
      initContainers:
      - name: init
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}{{ template "platform" . }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        command: ["/usr/local/bin/init.sh"]
        env:
          - name: DB_NAME
            value: {{ .Values.database.name }}
          - name: DB_USER
            value: {{ .Values.database.username }}
          - name: DB_PASSWORD
            value: {{ .Values.database.password }}
          - name: DB_TCP_PORT
            value: {{ .Values.database.port | quote }}
          - name: DB_TCP_URL
            value: {{ .Values.database.hostname}}
          - name: DB_TYPE
            value: {{ .Values.database.type}}
          - name: DB_JDBC_CONN_URL
            value: {{ .Values.database.jdbcConnUrl}}
          - name: UCD_INIT_PASSWD
            value: {{ .Values.security.ucdInitPassword}}
          - name: UCD_STS
            value: {{ .Release.Name }}
          - name: MYSQL_DATABASE
            value: {{ default "" .Values.mysql.mysqlDatabase | quote }}
          - name: MYSQL_USER
            value: {{ default "" .Values.mysql.mysqlUser | quote }}
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "mysql.fullname" . }}
                key: mysql-password
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "mysql.fullname" . }}
                key: mysql-root-password
        volumeMounts:
          {{- if ne .Values.database.type "derby"}}
          - name: "{{ template "fullname" . }}-{{ .Values.extLibVolume.name }}"
            mountPath: "/opt/hcl-ucd/server/ext_lib"
          {{- end}}
          - name: "{{ template "fullname" . }}-{{ .Values.appDataVolume.name }}"
            mountPath: "/opt/hcl-ucd/server/appdata"
          {{- if .Values.extLibVolume.configMapName }}
          - name: user-script
            mountPath: "/tmp/user-script"
          {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}{{ template "platform" . }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        ports:
        {{- if .Values.secureConnections.required }}
        - containerPort: 8443
        {{- else }}
        - containerPort: 8080
        {{- end }}
        - containerPort: 7918
        - containerPort: 7919
        readinessProbe:
          httpGet:
            path: /connTest.txt
            {{- if .Values.secureConnections.required }}
            port: 8443
            scheme: HTTPS
            {{- else }}
            port: 8080
            scheme: HTTP
            {{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        livenessProbe:
          httpGet:
            path: /connTest.txt
            {{- if .Values.secureConnections.required }}
            port: 8443
            scheme: HTTPS
            {{- else }}
            port: 8080
            scheme: HTTP
            {{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        env:
          - name: DB_NAME
            value: {{ .Values.database.name }}
          - name: DB_USER
            value: {{ .Values.database.username }}
          - name: DB_PASSWORD
            value: {{ .Values.database.password }}
          - name: DB_TCP_PORT
            value: {{ .Values.database.port | quote }}
          - name: DB_TCP_URL
            value: {{ .Values.database.hostname}}
          - name: DB_TYPE
            value: {{ .Values.database.type}}
          - name: DB_JDBC_CONN_URL
            value: {{ .Values.database.jdbcConnUrl}}
          - name: SECURE
            {{- if .Values.secureConnections.required }}
            value: "Y"
            {{- else }}
            value: "N"
            {{- end }}
        volumeMounts:
          {{- if ne .Values.database.type "derby"}}
          - name: "{{ template "fullname" . }}-{{ .Values.extLibVolume.name }}"
            mountPath: "/opt/hcl-ucd/server/ext_lib"
          {{- end}}
          - name: "{{ template "fullname" . }}-{{ .Values.appDataVolume.name }}"
            mountPath: "/opt/hcl-ucd/server/appdata"
          {{- if .Values.extLibVolume.configMapName }}
          - name: user-script
            mountPath: "/tmp/user-script"
          {{- end }}
        resources:
          {{- if .Values.resources.constraints.enabled}}
          limits:
{{ toYaml .Values.resources.limits | indent 12 }}
          requests:
{{ toYaml .Values.resources.requests | indent 12 }}
          {{- end }}
      {{- if .Values.image.secret }}
      imagePullSecrets:
      - name: {{ .Values.image.secret }}
      {{- end }}
      volumes:
      {{- if ne .Values.database.type "derby"}}
      - name: "{{ template "fullname" . }}-{{ .Values.extLibVolume.name }}"
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          {{- if .Values.extLibVolume.existingClaimName }}
          claimName: {{ .Values.extLibVolume.existingClaimName }}
          {{- else }}
          claimName: {{ template "fullname" . }}-{{ .Values.extLibVolume.name }}
          {{- end }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      - name: "{{ template "fullname" . }}-{{ .Values.appDataVolume.name }}"
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
        {{- if .Values.appDataVolume.existingClaimName }}
          claimName: {{ .Values.appDataVolume.existingClaimName }}
        {{- else }}
          claimName: {{ template "fullname" . }}-{{ .Values.appDataVolume.name }}
        {{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if .Values.extLibVolume.configMapName }}
      - name: user-script
        configMap:
          name: {{ .Values.extLibVolume.configMapName }}
          defaultMode: 0744
{{- end }}

